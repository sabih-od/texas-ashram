// abusiveWords.middleware.ts
import { Injectable, NestMiddleware } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';

@Injectable()
export class AbusiveWordsMiddleware implements NestMiddleware {
    // Array of abusive words to check against
    private abusiveWords: string[] = [
        'Fuck',
        'Fuck you',
        'Shit',
        'Piss off',
        'Dick head',
        'Asshole',
        'Son of a bitch',
        'Bastard',
        'Bitch',
        'Damn',
        'Cunt',
        'Bollocks',
        'Bugger',
        'Bloody Hell',
        'Choad',
        'Crikey',
        'Rubbish',
        'Shag',
        'Wanker',
        'Taking the piss',
        'arse',
        'arsehole',
        'as useful as tits on a bull',
        'balls',
        'bastard',
        'beaver',
        'beef curtains',
        'bell',
        'bellend',
        'bent',
        'berk',
        'bint',
        'bitch',
        'blighter',
        'blimey',
        'blimey o`reilly',
        'bloodclaat',
        'bloody',
        'bloody hell',
        'blooming',
        'bollocks',
        'bonk',
        'bugger',
        'bugger me',
        'bugger off',
        'built like a brick shit-house',
        'bukkake',
        'bullshit',
        'cack',
        'cad',
        'chav',
        'cheese eating surrender monkey',
        'choad',
        'chuffer',
        'clunge',
        'cobblers',
        'cock',
        'cock cheese',
        'cock jockey',
        'cock-up',
        'cocksucker',
        'cockwomble',
        'codger',
        'cor blimey',
        'corey',
        'cow',
        'crap',
        'crikey',
        'cunt',
        'daft',
        'daft cow',
        'damn',
        'dick',
        'dickhead',
        'did he bollocks!',
        'did i fuck as like!',
        'dildo',
        'dodgy',
        'duffer',
        'fanny',
        'feck',
        'flaps',
        'fuck',
        'fuck me sideways!',
        'fucking cunt',
        'fucktard',
        'gash',
        'ginger',
        'git',
        'gob shite',
        'goddam',
        'gorblimey',
        'gordon bennett',
        'gormless',
        'heâ€™s a knob',
        'hell',
        'hobknocker',
        'I`d rather snort my own cum',
        'jesus christ',
        'jizz',
        'knob',
        'knobber',
        'knobend',
        'knobhead',
        'ligger',
        'like fucking a dying man`s handshake',
        'mad as a hatter',
        'manky',
        'minge',
        'minger',
        'minging',
        'motherfucker',
        'munter',
        'muppet',
        'naff',
        'nitwit',
        'nonce',
        'numpty',
        'nutter',
        'off their rocker',
        'penguin',
        'pillock',
        'pish',
        'piss off',
        'piss-flaps',
        'pissed',
        'pissed off',
        'play the five-fingered flute',
        'plonker',
        'ponce',
        'poof',
        'pouf',
        'poxy',
        'prat',
        'prick',
        'prick',
        'prickteaser',
        'punani',
        'punny',
        'pussy',
        'randy',
        'rapey',
        'rat arsed',
        'rotter',
        'rubbish',
        'scrubber',
        'shag',
        'shit',
        'shite',
        'shitfaced',
        'skank',
        'slag',
        'slapper',
        'slut',
        'snatch',
        'sod',
        'sod-off',
        'son of a bitch',
        'spunk',
        'stick it up your arse!',
        'swine',
        'taking the piss',
        'tart',
        'tits',
        'toff',
        'tosser',
        'trollop',
        'tuss',
        'twat',
        'twonk',
        'u fukin wanker',
        'wally',
        'wanker',
        'wankstain',
        'wazzack',
        'whore',
    ];

    use(req: Request, res: Response, next: NextFunction) {
        // Check each key-value pair in the request body
        for (const key in req.body) {
            if (typeof req.body[key] === 'string') {
                const value = req.body[key];

                // Check if value contains abusive words
                if (this.containsAbusiveWords(value)) {
                    return res.status(400).json({
                        success: false,
                        message: 'Abusive words detected.',
                        data: [],
                    });
                }
            }
        }

        next();
    }

    private containsAbusiveWords(value: string): boolean {
        const lowercaseValue = value.toLowerCase();

        for (const abusiveWord of this.abusiveWords) {
            if (lowercaseValue.includes(abusiveWord)) {
                return true;
            }
        }

        return false;
    }
}
